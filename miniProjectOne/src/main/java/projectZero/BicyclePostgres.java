package projectZero;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

public class BicyclePostgres implements BicycleDAO {
	private ConnectionUtil connUtil = ConnectionUtil.getConnectionUtil();

	@Override
	public int create(Bicycle dataToAdd) {
		int generatedId = 0;
		
		// try-with-resources auto-closes resources
		try (Connection conn = connUtil.getConnection()) {
			// when you run DML statements, you want to manage the TCL
			conn.setAutoCommit(false);
			
			String sql = "insert into bicycle (id,brand,model,weight,speed,color,status) "
					+ "values (default, ?, ?, ?, ?, ?, ?)";
			String[] keys = {"id"}; // the name of the primary key column that will be autogenerated
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			// we need to set the values of the question marks
			pStmt.setString(1, dataToAdd.getBrand()); // question mark index starts at 1
			pStmt.setString(2, dataToAdd.getModel());
			pStmt.setString(3, dataToAdd.getWeight());
			pStmt.setString(4, dataToAdd.getSpeed());
			pStmt.setString(5, dataToAdd.getColor());
			pStmt.setString(6, dataToAdd.getStatus());
			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			
			if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return generatedId;
	}

	@Override
	public Bicycle getById(int id) {
		Bicycle bicycle = null;
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from person where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				bicycle = new Bicycle();
				bicycle.setId(id);
				bicycle.setBrand(resultSet.getString("brand"));
				bicycle.setModel(resultSet.getString("model"));
				bicycle.setWeight(resultSet.getString("weight"));
				bicycle.setSpeed(resultSet.getString("speed"));
				bicycle.setColor(resultSet.getString("color"));
				bicycle.setStatus(resultSet.getString("status"));
				
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return bicycle;
	}
	

	@Override
	public Set<Bicycle> getAll() {
		Set<Bicycle> allBicycles = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from bicycle";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			// while the result set has another row
			while (resultSet.next()) {
				// create the Bicycle object
				Bicycle bicycle = new Bicycle();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				bicycle.setId(resultSet.getInt("id"));
				bicycle.setBrand(resultSet.getString("brand"));
				bicycle.setModel(resultSet.getString("model"));
				bicycle.setWeight(resultSet.getString("weight"));
				bicycle.setSpeed(resultSet.getString("speed"));
				bicycle.setColor(resultSet.getString("color"));
				bicycle.setStatus(resultSet.getString("status"));
				
				allBicycles.add(bicycle);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allBicycles;
	}

	@Override
	public void update(Bicycle dataToUpdate) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "update bicycle set "
					+ "brand=?,model=?,weight=?,speed=?,color=?,status=?"
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, dataToUpdate.getBrand());
			pStmt.setString(2, dataToUpdate.getModel());
			pStmt.setString(3, dataToUpdate.getWeight());
			pStmt.setString(4, dataToUpdate.getSpeed());
			pStmt.setString(5, dataToUpdate.getColor());
			pStmt.setString(6, dataToUpdate.getStatus());
			pStmt.setInt(7, dataToUpdate.getId());
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
		

	@Override
	public void delete(Bicycle dataToDelete) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "delete from bicycle "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToDelete.getId());
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				 
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public Set<Bicycle> getByStatus(String status) {
		Set<Bicycle> allBicycles = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from bicycle";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			// while the result set has another row
			while (resultSet.next()) {
				// create the Bicycle object
				Bicycle bicycle = new Bicycle();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				bicycle.setId(resultSet.getInt("id"));
				bicycle.setBrand(resultSet.getString("brand"));
				bicycle.setModel(resultSet.getString("model"));
				bicycle.setWeight(resultSet.getString("weight"));
				bicycle.setSpeed(resultSet.getString("speed"));
				bicycle.setColor(resultSet.getString("color"));
				bicycle.setStatus(resultSet.getString("status"));
				
				allBicycles.add(bicycle);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allBicycles;
	
	}
}



